# Logstash Helm Chart Values
replicas: 1

# Logstash Configuration
logstashConfig:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline

# Pipeline Configuration
logstashPipeline:
  logstash.conf: |
    input {
      beats {
        port => 5044
      }
      tcp {
        port => 5000
        codec => json
      }
      http {
        port => 8080
      }
    }
    
    filter {
      if [kubernetes] {
        mutate {
          add_field => { "cluster" => "k3s-cluster" }
        }
      }
      
      # Parse JSON logs
      if [message] =~ /^\{.*\}$/ {
        json {
          source => "message"
        }
      }
      
      # Add timestamp
      date {
        match => [ "@timestamp", "ISO8601" ]
      }
      
      # Add hostname
      mutate {
        add_field => { "cluster_name" => "k3s-elk-cluster" }
      }
    }
    
    output {
      elasticsearch {
        hosts => ["${elasticsearch_hosts}"]
        index => "k3s-logs-%%{+YYYY.MM.dd}"
        template_overwrite => true
      }
      stdout {
        codec => rubydebug
      }
    }

# Resource Configuration
resources:
  requests:
    cpu: "500m"
    memory: "1Gi"
  limits:
    cpu: "1000m"
    memory: "2Gi"

# JVM Configuration
logstashJavaOpts: "-Xms1g -Xmx1g"

# Service Configuration
service:
  type: ClusterIP
  ports:
    - name: beats
      port: 5044
      protocol: TCP
      targetPort: 5044
    - name: tcp
      port: 5000
      protocol: TCP
      targetPort: 5000
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080

# Image Configuration
image: "docker.elastic.co/logstash/logstash"
imageTag: "8.11.0"
imagePullPolicy: "IfNotPresent"

# Security Context
securityContext:
  capabilities:
    drop:
    - ALL
  runAsNonRoot: true
  runAsUser: 1000

# Node Selector and Tolerations
nodeSelector: {}
tolerations: []

# Labels
labels:
  app: "logstash"
  component: "logstash"

# Persistence (optional for Logstash)
persistence:
  enabled: false

# Health Checks
livenessProbe:
  httpGet:
    path: "/"
    port: 9600
  initialDelaySeconds: 60
  periodSeconds: 30

readinessProbe:
  httpGet:
    path: "/"
    port: 9600
  initialDelaySeconds: 30
  periodSeconds: 10